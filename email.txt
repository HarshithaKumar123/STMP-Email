//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
#include <IdMessageBuilder.hpp>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
#pragma link "IdBaseComponent"
#pragma link "IdComponent"
#pragma link "IdExplicitTLSClientServerBase"
#pragma link "IdIOHandler"
#pragma link "IdIOHandlerSocket"
#pragma link "IdIOHandlerStack"
#pragma link "IdMessage"
#pragma link "IdMessageClient"
#pragma link "IdSMTP"
#pragma link "IdSMTPBase"
#pragma link "IdSSL"
#pragma link "IdSSLOpenSSL"
#pragma link "IdTCPClient"
#pragma link "IdTCPConnection"
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------


void __fastcall TForm1::Button2Click(TObject *Sender)
{
TListBox* LAttachment;
IdSMTP1->Host=EHost->Text;
		IdSMTP1->Username=EUsername->Text;
		 IdSMTP1->Password=EPassword->Text;

			 IdMessage1->Clear() ;
			   IdMessage1->Body->Text=MBody->Text;

				TIdMessageBuilderPlain* MyMessage= new TIdMessageBuilderPlain();

                    if(LAttachment->Items->Count>0){
					for(int i=0;i<LAttachment->Items->Count;i++)
						MyMessage->Attachments->Add(LAttachment->Items->Strings[i]);
					MyMessage->PlainText->Text=MBody->Text;
					MyMessage->FillMessage(IdMessage1) ;
				}
				try{
					IdSMTP1->Connect();
					IdSMTP1->Send(IdMessage1);
				}
				catch(...){
					ShowMessage("error");
				}
				IdSMTP1->Disconnect();
				delete MyMessage;

}
//---------------------------------------------------------------------------


